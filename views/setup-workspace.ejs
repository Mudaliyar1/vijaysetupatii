<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="Content-Security-Policy" content="default-src 'self' https://cdn.tailwindcss.com; script-src 'self' 'unsafe-inline' https://cdn.tailwindcss.com; style-src 'self' 'unsafe-inline' https://cdn.tailwindcss.com;">
    <title>Setting Up Workspace</title>
    <script src="https://cdn.tailwindcss.com"></script>
<body class="bg-gray-900 text-white">
    <main class="min-h-screen flex items-center justify-center">
        <div class="text-center">
            <h1 class="text-4xl font-bold mb-8 text-blue-400">Setting Up Your Workspace</h1>
            
            <!-- Connection Status -->
            <div id="connectionStatus" class="mb-8">
                <div class="flex items-center justify-center space-x-4">
                    <div class="flex items-center space-x-2">
                        <div id="connectionIndicator" class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <span id="connectionText" class="text-yellow-400">Checking connection...</span>
                    </div>
                    <div class="text-sm">
                        <span id="latencyText" class="text-gray-400">Latency: </span>
                        <span id="latencyValue" class="font-mono">--</span>
                        <span class="text-gray-400">ms</span>
                    </div>
                </div>
            </div>

            <!-- Progress Section -->
            <div class="max-w-md mx-auto mb-8">
                <div class="relative pt-1">
                    <div class="overflow-hidden h-2 mb-4 text-xs flex rounded bg-gray-700">
                        <div id="progressBar" 
                             class="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center transition-all duration-500"
                             style="width: 0%; background-color: rgb(239, 68, 68);">
                        </div>
                    </div>
                    <div id="statusText" class="text-sm text-gray-400">
                        Preparing your workspace...
                    </div>
                    <div id="progressPercentage" class="text-lg font-bold text-blue-400 mt-2">
                        0%
                    </div>
                    <div id="setupStatus" class="text-sm text-gray-400 mt-2">
                        Initializing...
                    </div>
                </div>
            </div>
        </div>
    </main>

    <script>
        let progress = 0;
        let setupStartTime = Date.now();
        const MAX_SETUP_TIME = 15000;
        const finalRedirect = '<%= redirectUrl %>';
        let connectionQuality = 'checking';
        let lastLatency = 0;
        let progressIncrement = 0;
        let securityChecks = {
            sqlInjection: false,
            xss: false,
            csrf: false
        };

        // Add randomization to progress steps
        const getRandomProgress = (min, max) => Math.floor(Math.random() * (max - min + 1) + min);

        const setupStages = [
            { progress: getRandomProgress(0, 10), message: 'Checking connection...', color: 'rgb(156, 163, 175)' },
            { progress: getRandomProgress(15, 25), message: 'Testing SQL injection protection...', color: 'rgb(234, 179, 8)' },
            { progress: getRandomProgress(30, 40), message: 'Verifying XSS protection...', color: 'rgb(234, 179, 8)' },
            { progress: getRandomProgress(45, 55), message: 'Checking CSRF safeguards...', color: 'rgb(234, 179, 8)' },
            { progress: getRandomProgress(60, 70), message: 'Verifying user role...', color: 'rgb(59, 130, 246)' },
            { progress: getRandomProgress(75, 85), message: 'Setting up secure environment...', color: 'rgb(59, 130, 246)' },
            { progress: getRandomProgress(90, 95), message: 'Finalizing security checks...', color: 'rgb(34, 197, 94)' },
            { progress: 100, message: 'Workspace secured!', color: 'rgb(34, 197, 94)' }
        ];

        async function checkConnection() {
            const start = performance.now();
            try {
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), 5000);

                const response = await fetch('/auth/ping', {
                    signal: controller.signal,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest',
                        'Accept': 'application/json'
                    }
                });
                clearTimeout(timeoutId);

                if (!response.ok) throw new Error('Connection failed');
                
                const data = await response.json();
                if (!data || typeof data !== 'object') {
                    throw new Error('Invalid response format');
                }
                
                lastLatency = Math.round(performance.now() - start);
                updateConnectionStatus(lastLatency);
                
                // Adjust progress increment based on connection quality
                progressIncrement = connectionQuality === 'good' ? getRandomProgress(8, 12) : 
                                   connectionQuality === 'medium' ? getRandomProgress(4, 8) : 
                                   getRandomProgress(1, 4);
                
                return lastLatency;
            } catch (error) {
                console.error('Connection check error:', error);
                updateConnectionStatus(-1);
                return -1;
            }
        }

        function updateConnectionStatus(latency) {
            const indicator = document.getElementById('connectionIndicator');
            const text = document.getElementById('connectionText');
            const latencyValue = document.getElementById('latencyValue');

            if (latency === -1) {
                connectionQuality = 'dead';
                indicator.className = 'w-3 h-3 rounded-full bg-red-500';
                text.className = 'text-red-400';
                text.textContent = 'Connection Dead';
                latencyValue.textContent = '--';
                return false;
            }

            latencyValue.textContent = latency;

            if (latency < 80) {
                connectionQuality = 'good';
                indicator.className = 'w-3 h-3 rounded-full bg-green-500 animate-pulse';
                text.className = 'text-green-400';
                text.textContent = 'Connection Excellent';
            } else if (latency < 150) {
                connectionQuality = 'good';
                indicator.className = 'w-3 h-3 rounded-full bg-green-500';
                text.className = 'text-green-400';
                text.textContent = 'Connection Good';
            } else if (latency < 300) {
                connectionQuality = 'medium';
                indicator.className = 'w-3 h-3 rounded-full bg-yellow-500';
                text.className = 'text-yellow-400';
                text.textContent = 'Connection Medium';
            } else {
                connectionQuality = 'poor';
                indicator.className = 'w-3 h-3 rounded-full bg-red-500';
                text.className = 'text-red-400';
                text.textContent = 'Connection Poor';
            }

            return true;
        }

        function updateProgress(progress) {
            const stage = setupStages.find(stage => progress <= stage.progress) || setupStages[setupStages.length - 1];
            const progressBar = document.getElementById('progressBar');
            const setupStatus = document.getElementById('setupStatus');
            const percentage = document.getElementById('progressPercentage');

            progressBar.style.width = `${progress}%`;
            progressBar.style.backgroundColor = stage.color;
            setupStatus.textContent = stage.message;
            percentage.textContent = `${Math.min(progress, 100)}%`;
        }

        function checkSetupTimeout() {
            const elapsed = Date.now() - setupStartTime;
            if (elapsed > MAX_SETUP_TIME) {
                const errorMessage = connectionQuality === 'poor' ? 
                    'Your internet connection is too slow' : 
                    'Internal server error detected';

                document.getElementById('statusText').innerHTML = `
                    <div class="text-red-400">
                        ${errorMessage}<br>
                        Redirecting to login in <span id="countdown">5</span> seconds...
                    </div>
                `;

                let count = 5;
                const countdown = setInterval(() => {
                    count--;
                    document.getElementById('countdown').textContent = count;
                    if (count <= 0) {
                        clearInterval(countdown);
                        window.location.href = '/login';
                    }
                }, 1000);

                return true;
            }
            return false;
        }

        async function simulateSetup() {
            try {
                // Initial connection check
                const latency = await checkConnection();
                if (latency === -1) {
                    throw new Error('Connection check failed');
                }

                // Dynamic progress update based on connection quality
                const progressInterval = setInterval(async () => {
                    if (checkSetupTimeout()) {
                        clearInterval(progressInterval);
                        return;
                    }

                    // Simulate security checks
                    if (progress >= 15 && !securityChecks.sqlInjection) {
                        securityChecks.sqlInjection = true;
                        await new Promise(resolve => setTimeout(resolve, 500));
                    }
                    if (progress >= 30 && !securityChecks.xss) {
                        securityChecks.xss = true;
                        await new Promise(resolve => setTimeout(resolve, 500));
                    }
                    if (progress >= 45 && !securityChecks.csrf) {
                        securityChecks.csrf = true;
                        await new Promise(resolve => setTimeout(resolve, 500));
                    }

                    // Increase progress based on connection quality
                    progress += progressIncrement * (connectionQuality === 'good' ? 1.5 : 
                               connectionQuality === 'medium' ? 1 : 0.5);
                    
                    // Update UI
                    updateProgress(Math.min(progress, 100));

                    // Check connection every 15% progress or if connection is poor
                    if (progress % 15 <= progressIncrement || connectionQuality === 'poor') {
                        await checkConnection();
                    }

                    // When complete
                    if (progress >= 100) {
                        clearInterval(progressInterval);
                        document.getElementById('statusText').textContent = 'Workspace secured and ready!';
                        setTimeout(() => {
                            window.location.replace(finalRedirect);
                        }, 1000);
                    }
                }, connectionQuality === 'good' ? 100 : connectionQuality === 'medium' ? 150 : 200);

            } catch (error) {
                console.error('Setup error:', error);
                checkSetupTimeout();
            }
        }

        // Start setup when page loads
        document.addEventListener('DOMContentLoaded', () => {
            simulateSetup();
        });
    </script>
</body>
</html>
