<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Chat</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-900 text-white">
    <%- include('partials/sidebar', { isAdmin: false }) %>

    <main class="container mx-auto px-4 py-8">
        <div class="max-w-4xl mx-auto">
            <div class="flex items-center justify-between mb-8">
                <div class="flex items-center space-x-4">
                    <a href="/" class="text-white hover:text-blue-400 flex items-center">
                        <svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"/>
                        </svg>
                        Back to Home
                    </a>
                    <h1 class="text-3xl font-bold">AI Chat</h1>
                </div>
                <div class="text-gray-400">
                    <% if (user) { %>
                        Chatting as <%= user.username %>
                    <% } else { %>
                        Chatting as Guest
                    <% } %>
                </div>
            </div>

            <!-- Chat Interface -->
            <div id="chatContainer" class="bg-gray-800 p-4 rounded-lg shadow-lg">
                <div id="chatMessages" class="overflow-y-auto h-96 mb-4 space-y-4">
                    <div class="text-center text-gray-500 text-sm">
                        Start chatting with our AI assistant!
                    </div>
                </div>
                <div class="flex space-x-2">
                    <input type="text" id="userInput" 
                           class="flex-1 p-3 rounded-lg bg-gray-700 text-white border border-gray-600 focus:border-blue-500 focus:outline-none" 
                           placeholder="Type your message...">
                    <button id="sendButton" 
                            class="bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-lg transition-colors duration-200 flex items-center">
                        <span>Send</span>
                        <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3"/>
                        </svg>
                    </button>
                </div>
            </div>
        </div>
    </main>

    <script>
        const chatMessages = document.getElementById('chatMessages');
        const userInput = document.getElementById('userInput');
        const sendButton = document.getElementById('sendButton');
        let currentRequest = null;

        const displayMessage = (content, isUser) => {
            const messageContainer = document.createElement('div');
            messageContainer.className = 'mb-4';

            const messageElement = document.createElement('div');
            messageElement.className = `p-3 rounded-lg ${isUser ? 'bg-blue-500 ml-auto' : 'bg-gray-700'} max-w-[80%]`;
            messageElement.textContent = content;

            const timestamp = document.createElement('div');
            const now = new Date();
            timestamp.textContent = now.toLocaleString();
            timestamp.className = `text-xs ${isUser ? 'text-right' : 'text-left'} text-gray-400 mt-1`;

            messageContainer.appendChild(messageElement);
            messageContainer.appendChild(timestamp);
            chatMessages.appendChild(messageContainer);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        };

        const displayTypingIndicator = () => {
            const typingContainer = document.createElement('div');
            typingContainer.id = 'typingIndicator';
            typingContainer.className = 'flex items-center space-x-2 p-3 rounded-lg bg-gray-700 max-w-[80%] mb-4';
            
            const typingText = document.createElement('span');
            typingText.className = 'text-gray-400';
            typingText.textContent = 'AI is typing';
            
            const dots = document.createElement('span');
            dots.className = 'typing-dots';
            dots.textContent = '...';
            
            typingContainer.appendChild(typingText);
            typingContainer.appendChild(dots);
            chatMessages.appendChild(typingContainer);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        };

        const removeTypingIndicator = () => {
            const typingIndicator = document.getElementById('typingIndicator');
            if (typingIndicator) {
                typingIndicator.remove();
            }
        };

        const setLoadingState = (isLoading) => {
            userInput.disabled = isLoading;
            const buttonSpan = sendButton.querySelector('span');
            const buttonIcon = sendButton.querySelector('svg');
            
            if (isLoading) {
                buttonSpan.textContent = 'Stop';
                sendButton.classList.remove('bg-blue-500', 'hover:bg-blue-600');
                sendButton.classList.add('bg-red-500', 'hover:bg-red-600');
                buttonIcon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>';
            } else {
                buttonSpan.textContent = 'Send';
                sendButton.classList.remove('bg-red-500', 'hover:bg-red-600');
                sendButton.classList.add('bg-blue-500', 'hover:bg-blue-600');
                buttonIcon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3"/>';
            }
        };

        const handleSend = async () => {
            const userMessage = userInput.value.trim();
            if (!userMessage || currentRequest) return;

            displayMessage(userMessage, true);
            userInput.value = '';
            setLoadingState(true);
            displayTypingIndicator();

            try {
                currentRequest = fetch('/ai-chat/chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ message: userMessage })
                });

                const response = await currentRequest;
                const data = await response.json();

                removeTypingIndicator();

                if (data.error) {
                    const errorContainer = document.createElement('div');
                    errorContainer.className = 'flex items-center justify-between text-red-500 mb-2 p-3 rounded-lg bg-red-900/50';
                    
                    const errorMessage = document.createElement('span');
                    errorMessage.textContent = data.error;
                    errorContainer.appendChild(errorMessage);

                    if (data.type === 'quota_exceeded' && data.retryAfter) {
                        const retryButton = document.createElement('button');
                        retryButton.textContent = 'Retry';
                        retryButton.className = 'ml-3 px-3 py-1 bg-red-600 hover:bg-red-700 rounded text-white text-sm';
                        retryButton.onclick = () => {
                            errorContainer.remove();
                            setTimeout(() => handleSend(), data.retryAfter * 1000);
                        };
                        errorContainer.appendChild(retryButton);
                    }

                    chatMessages.appendChild(errorContainer);
                } else {
                    displayMessage(data.message, false);
                }
            } catch (error) {
                console.error('Error fetching AI response:', error);
                removeTypingIndicator();
                displayMessage('Sorry, there was an error processing your request.', false);
            } finally {
                currentRequest = null;
                setLoadingState(false);
                userInput.focus();
            }
        };

        const handleStop = () => {
            if (currentRequest) {
                currentRequest = null;
                removeTypingIndicator();
                setLoadingState(false);
                displayMessage('AI response was stopped.', false);
            }
        };

        // Add event listeners
        sendButton.addEventListener('click', () => {
            if (currentRequest) {
                handleStop();
            } else {
                handleSend();
            }
        });

        userInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !currentRequest) {
                handleSend();
            }
        });
    </script>

    <style>
        .typing-dots {
            animation: typing 1.5s infinite;
        }

        @keyframes typing {
            0% { opacity: 0.3; }
            50% { opacity: 1; }
            100% { opacity: 0.3; }
        }
    </style>
</body>
</html>