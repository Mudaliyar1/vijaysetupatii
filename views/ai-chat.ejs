<!DOCTYPE html>
<html lang="en" class="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Chat - Futuristic Interface</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/@popperjs/core@2"></script>
    <script src="https://unpkg.com/tippy.js@6"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {
                    colors: {
                        primary: {
                            50: '#f0fdfa',
                            100: '#ccfbf1',
                            200: '#99f6e4',
                            300: '#5eead4',
                            400: '#2dd4bf',
                            500: '#14b8a6',
                            600: '#0d9488',
                            700: '#0f766e',
                            800: '#115e59',
                            900: '#134e4a',
                        },
                        secondary: {
                            50: '#f5f3ff',
                            100: '#ede9fe',
                            200: '#ddd6fe',
                            300: '#c4b5fd',
                            400: '#a78bfa',
                            500: '#8b5cf6',
                            600: '#7c3aed',
                            700: '#6d28d9',
                            800: '#5b21b6',
                            900: '#4c1d95',
                        },
                        dark: {
                            800: '#1a1a2e',
                            900: '#0f0f1a',
                        }
                    },
                    animation: {
                        'pulse-slow': 'pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite',
                        'bounce-slow': 'bounce 2s infinite',
                        'spin-slow': 'spin 3s linear infinite',
                        'ping-slow': 'ping 2s cubic-bezier(0, 0, 0.2, 1) infinite',
                        'typing': 'typing 1.5s infinite',
                        'float': 'float 3s ease-in-out infinite',
                        'glow': 'glow 2s ease-in-out infinite alternate',
                        'slide-in': 'slideIn 0.5s ease-out forwards',
                        'slide-out': 'slideOut 0.5s ease-in forwards',
                        'fade-in': 'fadeIn 0.3s ease-out forwards',
                        'fade-out': 'fadeOut 0.3s ease-in forwards',
                        'scale-in': 'scaleIn 0.3s ease-out forwards',
                        'scale-out': 'scaleOut 0.3s ease-in forwards',
                        'shake': 'shake 0.5s ease-in-out',
                    },
                    keyframes: {
                        typing: {
                            '0%, 100%': { opacity: '0.3' },
                            '50%': { opacity: '1' },
                        },
                        float: {
                            '0%, 100%': { transform: 'translateY(0)' },
                            '50%': { transform: 'translateY(-10px)' },
                        },
                        glow: {
                            '0%': { boxShadow: '0 0 5px rgba(0, 255, 255, 0.5)' },
                            '100%': { boxShadow: '0 0 20px rgba(0, 255, 255, 0.8), 0 0 30px rgba(0, 255, 255, 0.6)' },
                        },
                        slideIn: {
                            '0%': { transform: 'translateX(-100%)' },
                            '100%': { transform: 'translateX(0)' },
                        },
                        slideOut: {
                            '0%': { transform: 'translateX(0)' },
                            '100%': { transform: 'translateX(-100%)' },
                        },
                        fadeIn: {
                            '0%': { opacity: '0' },
                            '100%': { opacity: '1' },
                        },
                        fadeOut: {
                            '0%': { opacity: '1' },
                            '100%': { opacity: '0' },
                        },
                        scaleIn: {
                            '0%': { transform: 'scale(0.9)', opacity: '0' },
                            '100%': { transform: 'scale(1)', opacity: '1' },
                        },
                        scaleOut: {
                            '0%': { transform: 'scale(1)', opacity: '1' },
                            '100%': { transform: 'scale(0.9)', opacity: '0' },
                        },
                        shake: {
                            '0%, 100%': { transform: 'translateX(0)' },
                            '10%, 30%, 50%, 70%, 90%': { transform: 'translateX(-5px)' },
                            '20%, 40%, 60%, 80%': { transform: 'translateX(5px)' },
                        },
                    },
                    backdropBlur: {
                        xs: '2px',
                    },
                },
            },
        }
    </script>
    <!-- No inline EJS in script tags to avoid IDE errors -->
    <script>
        // Configuration will be loaded from data attributes
        window.appConfig = {};
    </script>
</head>
<body class="bg-dark-900 text-white transition-all duration-300 min-h-screen"
      data-is-guest="<%= user ? 'false' : 'true' %>"
      data-max-requests="<%= user ? 8 : 5 %>"
      data-username="<%= user ? user.username : 'Guest' %>"
      <% if (!user && typeof guestStats !== 'undefined' && guestStats) { %>
      data-guest-used="<%= guestStats.totalUsed %>"
      data-guest-max="<%= guestStats.maxTotal %>"
      data-guest-limit-exceeded="<%= guestLimitExceeded ? 'true' : 'false' %>"
      <% } %>
      >
    <%- include('partials/sidebar', { isAdmin: false }) %>

    <!-- Theme Toggle Button -->
    <div class="fixed top-4 right-4 z-50">
        <button id="themeToggle" class="p-2 rounded-full bg-gray-800/50 backdrop-blur-sm border border-gray-700 hover:bg-gray-700/70 transition-all duration-300 animate-glow">
            <svg id="darkIcon" class="w-5 h-5 sm:w-6 sm:h-6 text-yellow-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path>
            </svg>
            <svg id="lightIcon" class="w-5 h-5 sm:w-6 sm:h-6 text-yellow-400 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path>
            </svg>
        </button>
    </div>

    <!-- History Button -->
    <div class="fixed top-4 right-16 sm:top-4 sm:left-20 z-50">
        <button id="historyButton" class="p-2 rounded-full bg-secondary-600/50 backdrop-blur-sm border border-secondary-500 hover:bg-secondary-500/70 transition-all duration-300 group">
            <svg class="w-5 h-5 sm:w-6 sm:h-6 text-secondary-300 group-hover:text-white transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
        </button>
        <span class="absolute -bottom-8 left-1/2 transform -translate-x-1/2 text-xs text-secondary-300 opacity-0 group-hover:opacity-100 transition-opacity duration-300 hidden sm:block">History</span>
    </div>

    <!-- History Panel -->
    <div id="historyPanel" class="fixed left-0 top-0 h-full w-80 bg-gray-900/80 backdrop-blur-md border-r border-gray-700 transform -translate-x-full transition-transform duration-300 ease-out z-40 overflow-hidden">
        <div class="p-4 border-b border-gray-700 flex justify-between items-center">
            <h2 class="text-xl font-bold text-secondary-400">Chat History</h2>
            <div class="flex space-x-2">
                <button id="clearHistoryBtn" class="p-2 rounded-full bg-red-500/20 hover:bg-red-500/40 text-red-400 transition-colors">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                    </svg>
                </button>
                <button id="closeHistoryBtn" class="p-2 rounded-full bg-gray-700/50 hover:bg-gray-600/50 text-gray-300 transition-colors">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
        </div>

        <!-- Search Filter -->
        <div class="px-4 pt-3 pb-2">
            <div class="relative">
                <input type="text" id="historySearch" placeholder="Search history..."
                    class="w-full p-2 pl-8 rounded-lg bg-gray-800/70 text-white border border-gray-700 focus:border-primary-500/70 focus:ring-2 focus:ring-primary-500/20 focus:outline-none text-sm">
                <svg class="w-4 h-4 absolute left-2 top-1/2 transform -translate-y-1/2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
            </div>
        </div>

        <div id="historyList" class="p-4 overflow-y-auto h-[calc(100%-8rem)] space-y-3">
            <!-- History items will be added here dynamically -->
            <div class="text-center text-gray-500 py-8">
                <svg class="w-12 h-12 mx-auto mb-3 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <p>No chat history yet</p>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <main class="container mx-auto px-2 sm:px-4 py-4 sm:py-8 relative">
        <div class="max-w-5xl mx-auto">
            <!-- Header with User Info -->
            <div class="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-4 sm:mb-8 space-y-3 sm:space-y-0">
                <div class="flex items-center space-x-2 sm:space-x-4">
                    <a href="/" class="text-primary-400 hover:text-primary-300 flex items-center transition-colors duration-300 group p-1">
                        <svg class="w-5 h-5 sm:w-6 sm:h-6 group-hover:-translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"/>
                        </svg>
                        <span class="ml-1 sm:ml-2 text-sm sm:text-base">Home</span>
                    </a>
                    <h1 class="text-2xl sm:text-3xl font-bold bg-gradient-to-r from-primary-400 to-secondary-400 text-transparent bg-clip-text">AI Chat</h1>
                </div>
                <div id="userDisplay" class="flex items-center space-x-3 px-3 sm:px-4 py-1 sm:py-2 rounded-full bg-gray-800/50 backdrop-blur-sm border border-gray-700 text-sm sm:text-base">
                    <div class="w-2 h-2 rounded-full bg-green-500 animate-pulse"></div>
                    <div class="text-gray-300">
                        <% if (user) { %>
                            <span class="font-medium text-primary-300 border-b border-primary-500/50">@<%= user.username %></span>
                            <a href="/logout" class="ml-2 text-xs text-red-400 hover:text-red-300 transition-colors">(Logout)</a>
                        <% } else { %>
                            <span class="text-gray-400 animate-pulse-slow">Chatting as Guest</span>
                            <a href="/login?redirect=/ai-chat" class="ml-2 text-xs text-primary-400 hover:text-primary-300 transition-colors">(Login)</a>
                            <a href="/register?redirect=/ai-chat" class="ml-2 text-xs text-secondary-400 hover:text-secondary-300 transition-colors">(Register)</a>
                        <% } %>
                    </div>



                </div>
            </div>

            <!-- Request Limit Counter -->
            <div id="requestCounter" class="mb-2 sm:mb-4 text-right text-xs sm:text-sm">
                <% if (user) { %>
                    <div class="inline-flex items-center px-3 py-1 rounded-full bg-gray-800/70 backdrop-blur-sm border border-gray-700">
                        <span class="text-gray-400">Requests: </span>
                        <span id="requestCount" class="ml-1 font-medium text-primary-300">0/8</span>
                        <span class="ml-1 text-gray-500">per 2 minutes</span>
                    </div>
                <% } else { %>
                    <div class="inline-flex items-center px-3 py-1 rounded-full bg-gray-800/70 backdrop-blur-sm border border-gray-700">
                        <span class="text-gray-400">Guest Requests: </span>
                        <span id="requestCount" class="ml-1 font-medium text-primary-300"><%= guestStats ? guestStats.totalUsed : 0 %>/<%= guestStats ? guestStats.maxTotal : 5 %></span>
                        <span class="ml-1 text-gray-500">total</span>
                    </div>
                <% } %>
            </div>

            <!-- Chat Interface -->
            <div id="chatContainer" class="relative backdrop-blur-md bg-gray-800/30 p-3 sm:p-6 rounded-xl sm:rounded-2xl shadow-lg border border-gray-700/50 overflow-hidden">
                <!-- Glassmorphism overlay -->
                <div class="absolute inset-0 bg-gradient-to-br from-primary-500/5 to-secondary-500/5 pointer-events-none"></div>

                <!-- Messages Container -->
                <div id="chatMessages" class="overflow-y-auto h-[calc(100vh-16rem)] sm:h-[calc(100vh-20rem)] mb-3 sm:mb-6 space-y-4 sm:space-y-6 relative z-10 px-1 sm:px-2 py-2 sm:py-4 scrollbar-thin scrollbar-thumb-gray-700 scrollbar-track-transparent">
                    <% if (!user && guestLimitExceeded) { %>
                    <!-- Guest Limit Exceeded Error -->
                    <div class="p-4 rounded-xl sm:rounded-2xl bg-red-500/20 border border-red-500/30 text-red-300 mb-4 animate-shake">
                        <div class="flex items-center">
                            <svg class="w-5 h-5 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                            <span>You have reached the limit of 5 requests for guest users. Please login or register to continue using the AI chat.</span>
                        </div>
                        <div class="mt-2 text-gray-400 text-xs sm:text-sm">
                            <p>As a guest user, you are limited to <span class="text-primary-300 font-medium"><%= guestStats.maxTotal %></span> requests total.</p>
                            <p class="mt-1">You have used <span class="text-primary-300 font-medium"><%= guestStats.totalUsed %></span> of <span class="text-primary-300 font-medium"><%= guestStats.maxTotal %></span> requests.</p>
                            <p class="mt-1">Create an account to get <span class="text-primary-300 font-medium">8</span> requests per 2 minutes!</p>
                        </div>
                        <div class="mt-3 flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-3">
                            <a href="/login?redirect=/ai-chat" class="px-3 sm:px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-lg transition-colors text-xs sm:text-sm flex items-center justify-center sm:justify-start">
                                <svg class="w-3 h-3 sm:w-4 sm:h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1"></path>
                                </svg>
                                Login to Your Account
                            </a>
                            <a href="/register?redirect=/ai-chat" class="px-3 sm:px-4 py-2 bg-secondary-600 hover:bg-secondary-700 text-white rounded-lg transition-colors text-xs sm:text-sm flex items-center justify-center sm:justify-start">
                                <svg class="w-3 h-3 sm:w-4 sm:h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z"></path>
                                </svg>
                                Create New Account
                            </a>
                        </div>
                    </div>
                    <% } %>
                    <div class="text-center py-8">
                        <div class="w-16 h-16 mx-auto mb-4 rounded-full bg-gradient-to-br from-primary-500/30 to-secondary-500/30 flex items-center justify-center backdrop-blur-sm border border-gray-700/50 animate-float">
                            <svg class="w-8 h-8 text-primary-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z"></path>
                            </svg>
                        </div>
                        <h3 class="text-xl font-medium text-gray-300 mb-2">Welcome to AI Chat</h3>
                        <p class="text-gray-400 max-w-md mx-auto">Start chatting with our advanced AI assistant. Ask questions, get information, or just have a conversation!</p>
                    </div>
                </div>

                <!-- Input Area -->
                <div class="relative z-10">
                    <div class="flex space-x-2 sm:space-x-3">
                        <div class="relative flex-1">
                            <input type="text" id="userInput"
                                class="w-full p-3 sm:p-4 pr-10 sm:pr-12 rounded-xl sm:rounded-2xl bg-gray-700/50 text-white border border-gray-600/50 focus:border-primary-500/70 focus:ring-2 focus:ring-primary-500/20 focus:outline-none backdrop-blur-sm transition-all duration-300 placeholder-gray-400 text-sm sm:text-base"
                                placeholder="Type your message..."
                                <% if (!user && guestLimitExceeded) { %>disabled<% } %>>
                            <div class="absolute right-3 top-1/2 transform -translate-y-1/2 text-xs text-gray-400" id="charCounter"></div>
                        </div>
                        <button id="sendButton"
                                class="group relative overflow-hidden px-4 sm:px-6 py-3 rounded-xl sm:rounded-2xl bg-gradient-to-r from-primary-600 to-secondary-600 text-white shadow-lg hover:shadow-primary-500/20 transition-all duration-300 flex items-center justify-center min-w-[80px] sm:min-w-[100px] text-sm sm:text-base <%= (!user && guestLimitExceeded) ? 'opacity-50 cursor-not-allowed' : '' %>"
                                <%= (!user && guestLimitExceeded) ? 'disabled' : '' %>>
                            <!-- Button background glow effect -->
                            <div class="absolute inset-0 bg-gradient-to-r from-primary-400 to-secondary-400 opacity-0 group-hover:opacity-30 transition-opacity duration-300"></div>

                            <!-- Button content -->
                            <span class="relative z-10 font-medium">Send</span>
                            <svg class="w-5 h-5 ml-2 relative z-10 group-hover:translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3"/>
                            </svg>

                            <!-- Ripple effect container -->
                            <span class="ripple-container absolute inset-0 z-0"></span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <script>
        // DOM Elements
        const chatMessages = document.getElementById('chatMessages');
        const userInput = document.getElementById('userInput');
        const sendButton = document.getElementById('sendButton');
        const themeToggle = document.getElementById('themeToggle');
        const darkIcon = document.getElementById('darkIcon');
        const lightIcon = document.getElementById('lightIcon');
        const historyButton = document.getElementById('historyButton');
        const historyPanel = document.getElementById('historyPanel');
        const closeHistoryBtn = document.getElementById('closeHistoryBtn');
        const clearHistoryBtn = document.getElementById('clearHistoryBtn');
        const historyList = document.getElementById('historyList');
        const requestCount = document.getElementById('requestCount');
        const charCounter = document.getElementById('charCounter');

        // Constants - must match server-side values
        const MAX_REQUESTS_PER_WINDOW_LOGGED = 8; // 8 requests per 2 minutes for logged users
        const MAX_GUEST_REQUESTS = 5; // 5 requests total for guests

        // State variables
        let currentRequest = null;
        let isDarkMode = true; // Default to dark mode
        let chatHistory = [];
        // Load configuration from data attributes
        window.appConfig = {
            isGuest: document.body.getAttribute('data-is-guest') === 'true',
            maxRequests: parseInt(document.body.getAttribute('data-max-requests')),
            username: document.body.getAttribute('data-username')
        };

        // Set guest limit exceeded flag from data attribute
        window.appConfig.guestLimitExceeded = document.body.getAttribute('data-guest-limit-exceeded') === 'true';

        // Initialize usage stats
        let usageStats = {
            isGuest: window.appConfig.isGuest,
            used: 0,
            max: window.appConfig.isGuest ? 5 : 8, // 5 for guests, 8 for logged-in users
            totalUsed: 0,
            maxTotal: 5 // Hardcoded to ensure it's always 5 for guests
        };

        // Get guest max from data attributes if available
        const guestMax = document.body.getAttribute('data-guest-max');
        if (guestMax) {
            usageStats.maxTotal = parseInt(guestMax);
            console.log('Initial guest max from data attribute:', usageStats.maxTotal);
        }

        // Get guest stats from data attributes if available
        const guestUsed = document.body.getAttribute('data-guest-used');
        if (guestUsed) {
            usageStats.totalUsed = parseInt(guestUsed);
            console.log('Initial guest stats from data attribute:', usageStats.totalUsed);
        }

        // Display initial guest stats if available
        if (usageStats.isGuest && usageStats.totalUsed > 0) {
            console.log('Initial guest stats:', usageStats);
            // We'll call this after the DOM is loaded
            document.addEventListener('DOMContentLoaded', () => {
                updateUsageDisplay(usageStats);
            });
        }

        // Initialize the UI
        document.addEventListener('DOMContentLoaded', () => {
            // Check for mobile and adjust UI accordingly
            checkMobileAndAdjustUI();

            // Listen for window resize events
            window.addEventListener('resize', checkMobileAndAdjustUI);

            // Load theme preference
            const savedTheme = localStorage.getItem('theme');
            if (savedTheme) {
                isDarkMode = savedTheme === 'dark';
                updateTheme();
            }

            // Load chat history
            fetchChatHistory();

            // Add ripple effect to send button
            addRippleEffect();

            // Initialize character counter
            updateCharCounter();
        });



        // Theme toggle functionality
        themeToggle.addEventListener('click', () => {
            isDarkMode = !isDarkMode;
            updateTheme();
            localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');
        });

        function updateTheme() {
            const html = document.documentElement;

            if (isDarkMode) {
                html.classList.add('dark');
                html.classList.remove('light');
                darkIcon.classList.remove('hidden');
                lightIcon.classList.add('hidden');
                document.body.classList.remove('bg-gray-200');
                document.body.classList.add('bg-dark-900');

                // Restore dark mode styling
                document.querySelectorAll('.bg-gray-300\/70').forEach(el => {
                    el.classList.remove('bg-gray-300/70');
                    el.classList.add('bg-gray-800/50');
                });

                // Update chat container background
                const chatContainer = document.getElementById('chatContainer');
                if (chatContainer) {
                    chatContainer.classList.remove('bg-gray-300/50');
                    chatContainer.classList.add('bg-gray-800/30');
                }
            } else {
                html.classList.remove('dark');
                html.classList.add('light');
                darkIcon.classList.add('hidden');
                lightIcon.classList.remove('hidden');
                document.body.classList.remove('bg-dark-900');
                document.body.classList.add('bg-gray-200');

                // Add a softer background color to all elements
                document.querySelectorAll('.bg-gray-800, .bg-gray-800\/50, .bg-gray-800\/70').forEach(el => {
                    el.classList.remove('bg-gray-800', 'bg-gray-800/50', 'bg-gray-800/70');
                    el.classList.add('bg-gray-300/70');
                });

                // Update chat container background
                const chatContainer = document.getElementById('chatContainer');
                if (chatContainer) {
                    chatContainer.classList.remove('bg-gray-800/30');
                    chatContainer.classList.add('bg-gray-300/50');
                }
            }

            // Update history panel theme if it's open
            if (!historyPanel.classList.contains('-translate-x-full')) {
                updateHistoryPanelTheme();
            }
        }

        // History panel functionality
        historyButton.addEventListener('click', toggleHistoryPanel);
        closeHistoryBtn.addEventListener('click', toggleHistoryPanel);

        function toggleHistoryPanel() {
            const isOpen = !historyPanel.classList.contains('-translate-x-full');

            if (isOpen) {
                // Close panel with animation
                historyPanel.style.transition = 'transform 300ms ease-in';
                historyPanel.classList.add('-translate-x-full');

                // Show history button
                historyButton.classList.remove('hidden');

                // If on mobile, remove any overlay we might have added
                if (window.innerWidth < 640) {
                    const overlay = document.getElementById('mobileHistoryOverlay');
                    if (overlay) {
                        overlay.classList.add('animate-fade-out');
                        setTimeout(() => overlay.remove(), 300);
                    }
                    document.body.style.overflow = 'auto';
                }
            } else {
                // Open panel with animation
                historyPanel.style.transition = 'transform 400ms cubic-bezier(0.175, 0.885, 0.32, 1.275)';
                historyPanel.classList.remove('-translate-x-full');

                // Hide history button when panel is open
                historyButton.classList.add('hidden');

                // Apply current theme to history panel
                updateHistoryPanelTheme();

                // If on mobile, add a dark overlay behind the panel
                if (window.innerWidth < 640) {
                    // Create overlay if it doesn't exist
                    if (!document.getElementById('mobileHistoryOverlay')) {
                        const overlay = document.createElement('div');
                        overlay.id = 'mobileHistoryOverlay';
                        overlay.className = 'fixed inset-0 bg-black/50 z-30 animate-fade-in';
                        overlay.addEventListener('click', toggleHistoryPanel);
                        document.body.appendChild(overlay);
                    }
                    document.body.style.overflow = 'hidden'; // Prevent scrolling behind the panel
                }

                // Fetch history after panel is open
                setTimeout(() => {
                    fetchChatHistory();
                }, 300);
            }
        }

        // Function to update history panel theme
        function updateHistoryPanelTheme() {
            const historyPanel = document.getElementById('historyPanel');
            const historySearch = document.getElementById('historySearch');
            const historyItems = document.querySelectorAll('#historyList > div:not(.text-center)');

            if (isDarkMode) {
                historyPanel.classList.remove('bg-white/90', 'bg-gray-200/90');
                historyPanel.classList.add('bg-gray-900/80');

                if (historySearch) {
                    historySearch.classList.remove('bg-gray-200', 'text-gray-800');
                    historySearch.classList.add('bg-gray-800/70', 'text-white');
                }

                // Update history items
                historyItems.forEach(item => {
                    item.classList.remove('bg-gray-300/50', 'hover:bg-gray-400/50', 'border-gray-400/50');
                    item.classList.add('bg-gray-800/50', 'hover:bg-gray-700/50', 'border-gray-700/50');
                });
            } else {
                historyPanel.classList.remove('bg-gray-900/80');
                historyPanel.classList.add('bg-gray-200/90');

                if (historySearch) {
                    historySearch.classList.remove('bg-gray-800/70', 'text-white');
                    historySearch.classList.add('bg-gray-200', 'text-gray-800');
                }

                // Update history items
                historyItems.forEach(item => {
                    item.classList.remove('bg-gray-800/50', 'hover:bg-gray-700/50', 'border-gray-700/50');
                    item.classList.add('bg-gray-300/50', 'hover:bg-gray-400/50', 'border-gray-400/50');
                });
            }
        }

        // Clear history functionality
        clearHistoryBtn.addEventListener('click', async () => {
            try {
                const response = await fetch('/ai-chat/history', {
                    method: 'DELETE',
                });

                const data = await response.json();

                if (data.success) {
                    // Clear the history list with animation
                    historyList.classList.add('animate-fade-out');

                    setTimeout(() => {
                        historyList.innerHTML = `
                            <div class="text-center text-gray-500 py-8 animate-fade-in">
                                <svg class="w-12 h-12 mx-auto mb-3 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                                <p>No chat history yet</p>
                            </div>
                        `;
                        historyList.classList.remove('animate-fade-out');

                        // Show success message
                        showNotification('Chat history cleared successfully', 'success');

                        // Update local history
                        chatHistory = [];
                    }, 300);
                }
            } catch (error) {
                console.error('Error clearing history:', error);
                showNotification('Failed to clear chat history', 'error');
            }
        });

        // Fetch chat history from server
        async function fetchChatHistory() {
            try {
                const response = await fetch('/ai-chat/history');
                const data = await response.json();

                if (data.history && data.history.length > 0) {
                    chatHistory = data.history;
                    renderChatHistory();
                    console.log('Loaded chat history:', chatHistory.length, 'entries');

                    // Show history panel if we have history
                    if (chatHistory.length > 0 && !historyPanel.classList.contains('translate-x-0')) {
                        toggleHistoryBtn.classList.remove('hidden');
                    }
                } else {
                    console.log('No chat history found');
                }
            } catch (error) {
                console.error('Error fetching chat history:', error);
            }
        }

        // Add event listener for history search
        const historySearch = document.getElementById('historySearch');
        historySearch.addEventListener('input', function() {
            renderChatHistory(this.value.toLowerCase());
        });

        // Render chat history in the panel
        function renderChatHistory(searchTerm = '') {
            if (chatHistory.length === 0) {
                return;
            }

            historyList.innerHTML = '';

            // Filter history based on search term
            const filteredHistory = searchTerm ?
                chatHistory.filter(entry =>
                    entry.userMessage.toLowerCase().includes(searchTerm) ||
                    entry.aiResponse.toLowerCase().includes(searchTerm)
                ) :
                chatHistory;

            // Show no results message if filtered history is empty
            if (filteredHistory.length === 0 && searchTerm) {
                historyList.innerHTML = `
                    <div class="text-center text-gray-500 py-8 animate-fade-in">
                        <svg class="w-12 h-12 mx-auto mb-3 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                        </svg>
                        <p>No results found for "${searchTerm}"</p>
                    </div>
                `;
                return;
            }

            filteredHistory.forEach((entry, index) => {
                const historyItem = document.createElement('div');
                // Apply appropriate styling based on current theme
                if (isDarkMode) {
                    historyItem.className = 'p-2 sm:p-3 rounded-lg bg-gray-800/50 hover:bg-gray-700/50 border border-gray-700/50 transition-colors cursor-pointer animate-fade-in mb-2';
                } else {
                    historyItem.className = 'p-2 sm:p-3 rounded-lg bg-gray-300/50 hover:bg-gray-400/50 border border-gray-400/50 transition-colors cursor-pointer animate-fade-in mb-2';
                }
                historyItem.style.animationDelay = `${index * 50}ms`;

                const date = new Date(entry.timestamp);
                const formattedDate = window.innerWidth < 640 ?
                    date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) :
                    date.toLocaleString();

                historyItem.innerHTML = `
                    <div class="flex justify-between items-start mb-1">
                        <div class="text-xs text-gray-400">${formattedDate}</div>
                        <button class="text-red-400 hover:text-red-300 p-1 -mt-1 -mr-1 rounded-full hover:bg-red-500/20 transition-colors" data-id="${entry.id}">
                            <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>
                    <div class="text-xs sm:text-sm text-gray-300 font-medium truncate">${entry.userMessage}</div>
                    <div class="text-xs text-gray-400 truncate">${entry.aiResponse.substring(0, window.innerWidth < 640 ? 40 : 60)}${entry.aiResponse.length > (window.innerWidth < 640 ? 40 : 60) ? '...' : ''}</div>
                `;

                // Add click event to load this conversation
                historyItem.addEventListener('click', (e) => {
                    if (e.target.closest('button[data-id]')) {
                        // If clicking the delete button, don't load the conversation
                        return;
                    }

                    // Clear current messages
                    while (chatMessages.firstChild) {
                        chatMessages.removeChild(chatMessages.firstChild);
                    }

                    // Display the conversation
                    displayMessage(entry.userMessage, true, entry.timestamp);
                    displayMessage(entry.aiResponse, false, entry.timestamp);

                    // Close history panel
                    toggleHistoryPanel();
                });

                // Add delete button functionality
                const deleteBtn = historyItem.querySelector('button[data-id]');
                deleteBtn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    // Remove this item from history with animation
                    historyItem.classList.add('animate-scale-out');

                    setTimeout(() => {
                        // Remove from DOM
                        historyItem.remove();

                        // Remove from local array
                        chatHistory = chatHistory.filter(h => h.id !== entry.id);

                        // If history is now empty, show empty state
                        if (chatHistory.length === 0) {
                            historyList.innerHTML = `
                                <div class="text-center text-gray-500 py-8 animate-fade-in">
                                    <svg class="w-10 h-10 sm:w-12 sm:h-12 mx-auto mb-2 sm:mb-3 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                    <p class="text-sm">No chat history yet</p>
                                </div>
                            `;
                        }
                    }, 300);
                });

                historyList.appendChild(historyItem);
            });
        }

        // Display message in chat
        function displayMessage(content, isUser, timestamp = null) {
            // Remove welcome message if it exists
            const welcomeMsg = chatMessages.querySelector('.text-center.py-8');
            if (welcomeMsg) {
                welcomeMsg.remove();
            }

            const messageContainer = document.createElement('div');
            messageContainer.className = `flex ${isUser ? 'justify-end' : 'justify-start'} mb-4 animate-fade-in`;

            const messageWrapper = document.createElement('div');
            messageWrapper.className = `max-w-[90%] sm:max-w-[80%] ${isUser ? 'order-1' : 'order-2'}`;

            const messageElement = document.createElement('div');
            messageElement.className = `p-3 sm:p-4 rounded-xl sm:rounded-2xl ${isUser ?
                'bg-gradient-to-br from-primary-600 to-primary-700 text-white' :
                'bg-gray-800/70 backdrop-blur-sm border border-gray-700/50 text-gray-200'}
                shadow-lg animate-scale-in text-sm sm:text-base`;

            // Add glassmorphism effect
            if (!isUser) {
                const glassOverlay = document.createElement('div');
                glassOverlay.className = 'absolute inset-0 rounded-xl sm:rounded-2xl bg-gradient-to-br from-gray-700/10 to-gray-900/10 pointer-events-none';
                messageElement.style.position = 'relative';
                messageElement.appendChild(glassOverlay);
            }

            // Process links in AI responses
            if (!isUser) {
                // Special handling for Vijay's social media links
                content = content.replace(/Instagram:\s*(https?:\/\/www\.instagram\.com\/ft_raise_59)\s*(?:\(@ft_raise_59\))?/gi,
                    'Instagram: <a href="https://www.instagram.com/ft_raise_59" target="_blank" class="text-blue-500 hover:underline">@ft_raise_59</a>');

                content = content.replace(/GitHub:\s*(https?:\/\/github\.com\/Mudaliyar1\/)\s*(?:\(Mudaliyar1\))?/gi,
                    'GitHub: <a href="https://github.com/Mudaliyar1/" target="_blank" class="text-blue-500 hover:underline">Mudaliyar1</a>');

                content = content.replace(/Email:\s*(vijaymudaliyar224@gmail\.com)/gi,
                    'Email: <a href="mailto:vijaymudaliyar224@gmail.com" class="text-blue-500 hover:underline">vijaymudaliyar224@gmail.com</a>');

                // Also handle just the handles/emails without labels
                content = content.replace(/(?<!href=")https?:\/\/www\.instagram\.com\/ft_raise_59/gi,
                    '<a href="https://www.instagram.com/ft_raise_59" target="_blank" class="text-blue-500 hover:underline">https://www.instagram.com/ft_raise_59</a>');

                content = content.replace(/(?<!href=")https?:\/\/github\.com\/Mudaliyar1\//gi,
                    '<a href="https://github.com/Mudaliyar1/" target="_blank" class="text-blue-500 hover:underline">https://github.com/Mudaliyar1/</a>');

                content = content.replace(/(?<!href="|mailto:)vijaymudaliyar224@gmail\.com/gi,
                    '<a href="mailto:vijaymudaliyar224@gmail.com" class="text-blue-500 hover:underline">vijaymudaliyar224@gmail.com</a>');

                // Handle @ft_raise_59 and Mudaliyar1 mentions
                content = content.replace(/(?<!\w)@ft_raise_59(?!\w)/gi,
                    '<a href="https://www.instagram.com/ft_raise_59" target="_blank" class="text-blue-500 hover:underline">@ft_raise_59</a>');

                content = content.replace(/(?<!\w)Mudaliyar1(?!\w)/gi,
                    '<a href="https://github.com/Mudaliyar1/" target="_blank" class="text-blue-500 hover:underline">Mudaliyar1</a>');

                // Convert other URLs to clickable links
                content = content.replace(/(?<!href=")https?:\/\/[^\s<"']+/g, function(url) {
                    return `<a href="${url}" target="_blank" class="text-blue-400 hover:underline">${url}</a>`;
                });

                // Convert other email addresses to clickable mailto links
                content = content.replace(/(?<!href="mailto:|\w)([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})(?!\w|<\/a>)/g, function(email) {
                    return `<a href="mailto:${email}" class="text-blue-400 hover:underline">${email}</a>`;
                });

                // Remove any HTML tag syntax that might have been included in the AI response
                content = content.replace(/&lt;a\s+href=.*?&gt;|&lt;\/a&gt;/g, '');
                content = content.replace(/<a\s+href=.*?>|<\/a>/g, '');
            }

            messageElement.innerHTML = `<div class="relative z-10">${content}</div>`;

            const timestampEl = document.createElement('div');
            const date = timestamp ? new Date(timestamp) : new Date();
            timestampEl.textContent = date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            timestampEl.className = `text-xs text-gray-500 mt-1 ${isUser ? 'text-right' : 'text-left'}`;

            messageWrapper.appendChild(messageElement);
            messageWrapper.appendChild(timestampEl);

            // Add avatar for AI messages
            if (!isUser) {
                const avatar = document.createElement('div');
                avatar.className = 'w-6 h-6 sm:w-8 sm:h-8 rounded-full bg-gradient-to-br from-primary-500/70 to-secondary-500/70 flex items-center justify-center mr-1 sm:mr-2 order-1 backdrop-blur-sm border border-gray-700/50';
                avatar.innerHTML = `
                    <svg class="w-3 h-3 sm:w-4 sm:h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                    </svg>
                `;
                messageContainer.appendChild(avatar);
            }

            messageContainer.appendChild(messageWrapper);
            chatMessages.appendChild(messageContainer);
            chatMessages.scrollTop = chatMessages.scrollHeight;

            // Check if we're on mobile and adjust scroll if needed
            if (window.innerWidth < 640) {
                // Add a small delay to ensure the message is fully rendered
                setTimeout(() => {
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                }, 100);
            }
        }

        // Display typing indicator
        function displayTypingIndicator() {
            const typingContainer = document.createElement('div');
            typingContainer.id = 'typingIndicator';
            typingContainer.className = 'flex items-center space-x-2 p-4 rounded-2xl bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 max-w-[60%] mb-4 animate-float';

            const avatar = document.createElement('div');
            avatar.className = 'w-8 h-8 rounded-full bg-gradient-to-br from-primary-500/50 to-secondary-500/50 flex items-center justify-center mr-2 backdrop-blur-sm border border-gray-700/50';
            avatar.innerHTML = `
                <svg class="w-4 h-4 text-white animate-pulse" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                </svg>
            `;

            const typingText = document.createElement('span');
            typingText.className = 'text-gray-300';
            typingText.textContent = 'AI is thinking';

            const dots = document.createElement('span');
            dots.className = 'typing-dots text-primary-400';
            dots.textContent = '...';

            typingContainer.appendChild(avatar);
            typingContainer.appendChild(typingText);
            typingContainer.appendChild(dots);
            chatMessages.appendChild(typingContainer);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Remove typing indicator
        function removeTypingIndicator() {
            const typingIndicator = document.getElementById('typingIndicator');
            if (typingIndicator) {
                typingIndicator.classList.add('animate-fade-out');
                setTimeout(() => typingIndicator.remove(), 300);
            }
        }

        // Set loading state for send button
        function setLoadingState(isLoading) {
            userInput.disabled = isLoading;
            const buttonSpan = sendButton.querySelector('span');
            const buttonIcon = sendButton.querySelector('svg');

            if (isLoading) {
                buttonSpan.textContent = 'Stop';
                sendButton.classList.remove('bg-gradient-to-r', 'from-primary-600', 'to-secondary-600');
                sendButton.classList.add('bg-gradient-to-r', 'from-red-600', 'to-red-700');
                buttonIcon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>';
            } else {
                buttonSpan.textContent = 'Send';
                sendButton.classList.remove('bg-gradient-to-r', 'from-red-600', 'to-red-700');
                sendButton.classList.add('bg-gradient-to-r', 'from-primary-600', 'to-secondary-600');
                buttonIcon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3"/>';
            }
        }

        // Update request counter
        function updateRequestCounter(stats) {
            if (!requestCount) return;

            if (stats.isGuest) {
                requestCount.textContent = `${stats.totalUsed}/${stats.maxTotal}`;

                // Change color based on usage
                if (stats.totalUsed >= stats.maxTotal - 1) {
                    requestCount.classList.remove('text-primary-300');
                    requestCount.classList.add('text-red-400');
                }
            } else {
                requestCount.textContent = `${stats.used}/${stats.max}`;

                // Change color based on usage
                if (stats.used >= stats.max - 2) {
                    requestCount.classList.remove('text-primary-300');
                    requestCount.classList.add('text-yellow-400');
                }
                if (stats.used >= stats.max) {
                    requestCount.classList.remove('text-yellow-400');
                    requestCount.classList.add('text-red-400');
                }
            }
        }

        // Show notification
        function showNotification(message, type = 'info') {
            // Remove existing notifications
            const existingNotifications = document.querySelectorAll('.notification');
            existingNotifications.forEach(notification => {
                notification.classList.add('animate-fade-out');
                setTimeout(() => notification.remove(), 300);
            });

            const notification = document.createElement('div');
            notification.className = `notification fixed top-4 left-1/2 transform -translate-x-1/2 z-50 py-2 px-4 rounded-full backdrop-blur-md animate-fade-in shadow-lg text-sm ${type === 'error' ? 'bg-red-500/70 text-white' : type === 'success' ? 'bg-green-500/70 text-white' : 'bg-gray-800/70 text-white'}`;

            // For mobile, make sure the notification is not too wide
            if (window.innerWidth < 640) {
                notification.style.maxWidth = '90%';
                notification.style.whiteSpace = 'nowrap';
                notification.style.overflow = 'hidden';
                notification.style.textOverflow = 'ellipsis';
            }

            notification.textContent = message;
            document.body.appendChild(notification);

            // Auto remove after 3 seconds
            setTimeout(() => {
                notification.classList.add('animate-fade-out');
                setTimeout(() => notification.remove(), 300);
            }, 3000);
        }

        // Check if we're on mobile and adjust UI accordingly
        function checkMobileAndAdjustUI() {
            const isMobile = window.innerWidth < 640;

            // Adjust history panel width
            if (isMobile) {
                historyPanel.style.width = '100%';

                // Make sure the panel is closed on initial mobile load
                if (!historyPanel.classList.contains('-translate-x-full')) {
                    historyPanel.classList.add('-translate-x-full');
                }
            } else {
                historyPanel.style.width = '320px';
            }

            // Adjust chat container height
            const chatContainer = document.getElementById('chatContainer');
            if (chatContainer) {
                if (isMobile) {
                    chatMessages.style.height = 'calc(100vh - 16rem)';
                } else {
                    chatMessages.style.height = 'calc(100vh - 20rem)';
                }
            }
        }

        // Add ripple effect to send button
        function addRippleEffect() {
            const rippleContainer = sendButton.querySelector('.ripple-container');

            sendButton.addEventListener('click', function(e) {
                const rect = rippleContainer.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;

                const ripple = document.createElement('span');
                ripple.className = 'absolute rounded-full bg-white/30 transform -translate-x-1/2 -translate-y-1/2 pointer-events-none';
                ripple.style.left = `${x}px`;
                ripple.style.top = `${y}px`;
                ripple.style.width = '0';
                ripple.style.height = '0';

                rippleContainer.appendChild(ripple);

                // Animate the ripple
                setTimeout(() => {
                    ripple.style.width = '300px';
                    ripple.style.height = '300px';
                    ripple.style.opacity = '0';
                    ripple.style.transition = 'all 0.6s ease-out';

                    // Remove the ripple after animation
                    setTimeout(() => ripple.remove(), 600);
                }, 10);
            });
        }

        // Update character counter
        function updateCharCounter() {
            userInput.addEventListener('input', function() {
                const length = this.value.length;
                charCounter.textContent = length > 0 ? `${length}` : '';

                // Change color based on length
                if (length > 200) {
                    charCounter.classList.remove('text-gray-400');
                    charCounter.classList.add('text-yellow-400');
                } else {
                    charCounter.classList.remove('text-yellow-400');
                    charCounter.classList.add('text-gray-400');
                }
            });
        }

        // Handle sending message
        async function handleSend() {
            const userMessage = userInput.value.trim();
            if (!userMessage || currentRequest) return;

            // Check if guest limit is exceeded
            if (window.appConfig.isGuest && window.appConfig.guestLimitExceeded) {
                showNotification('You have reached the guest request limit. Please login or register to continue.', 'error');
                return;
            }

            // Display user message
            displayMessage(userMessage, true);
            userInput.value = '';
            charCounter.textContent = '';

            // Set loading state
            setLoadingState(true);
            displayTypingIndicator();

            try {
                // Send request to server
                currentRequest = fetch('/ai-chat/chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ message: userMessage })
                });

                const response = await currentRequest;
                const data = await response.json();

                removeTypingIndicator();

                // Update usage stats
                if (data.usageStats) {
                    usageStats = data.usageStats;
                    // Update the request counter display
                    if (requestCount) {
                        if (usageStats.isGuest) {
                            // For guests, show totalUsed/maxTotal (e.g., 3/5)
                            requestCount.textContent = `${usageStats.totalUsed}/${usageStats.maxTotal}`;
                            console.log(`Updated guest request counter: ${usageStats.totalUsed}/${usageStats.maxTotal}`);
                        } else {
                            // For logged-in users, show used/max (e.g., 2/8)
                            requestCount.textContent = `${usageStats.used}/${usageStats.max}`;
                            console.log(`Updated user request counter: ${usageStats.used}/${usageStats.max}`);
                        }
                    }
                }

                // Handle error response
                if (data.error) {
                    handleErrorResponse(data);
                } else {
                    // Display AI response with animation
                    setTimeout(() => {
                        displayMessage(data.message, false);

                        // Add to chat history if provided
                        if (data.historyId) {
                            // Refresh history after a short delay
                            setTimeout(fetchChatHistory, 500);
                        }
                    }, 300);
                }
            } catch (error) {
                console.error('Error fetching AI response:', error);
                removeTypingIndicator();

                // Show error message
                showNotification('Network error. Please try again.', 'error');
                displayMessage('Sorry, there was an error processing your request. Please try again.', false);
            } finally {
                currentRequest = null;
                setLoadingState(false);
                // Removed auto-focus to prevent keyboard from popping up after AI response
            }
        }

        // Handle error response
        function handleErrorResponse(data) {
            // Create error container
            const errorContainer = document.createElement('div');
            errorContainer.className = 'p-3 sm:p-4 rounded-xl sm:rounded-2xl bg-red-500/20 border border-red-500/30 text-red-300 mb-4 animate-shake text-sm sm:text-base';

            // Error message
            const errorMessage = document.createElement('div');
            errorMessage.className = 'flex items-center';

            // Check if the error message contains HTML
            if (data.html) {
                errorMessage.innerHTML = `
                    <svg class="w-4 h-4 sm:w-5 sm:h-5 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <span>${data.error}</span>
                `;
            } else {
                errorMessage.innerHTML = `
                    <svg class="w-4 h-4 sm:w-5 sm:h-5 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <span>${data.error}</span>
                `;
            }

            errorContainer.appendChild(errorMessage);

            // Add login/register buttons for guest quota exceeded
            if (data.type === 'guest_quota_exceeded') {
                // Add a more detailed message
                const detailMessage = document.createElement('div');
                detailMessage.className = 'mt-2 text-gray-400 text-xs sm:text-sm';
                detailMessage.innerHTML = `
                    <p>As a guest user, you are limited to <span class="text-primary-300 font-medium">${data.maxTotal}</span> requests total.</p>
                    <p class="mt-1">You have used <span class="text-primary-300 font-medium">${data.totalUsed}</span> of <span class="text-primary-300 font-medium">${data.maxTotal}</span> requests.</p>
                    <p class="mt-1">Create an account to get <span class="text-primary-300 font-medium">${MAX_REQUESTS_PER_WINDOW_LOGGED}</span> requests per 2 minutes!</p>
                `;
                errorContainer.appendChild(detailMessage);

                // Add buttons
                const buttonContainer = document.createElement('div');
                buttonContainer.className = 'mt-3 flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-3';

                const loginButton = document.createElement('a');
                loginButton.href = '/login?redirect=/ai-chat';
                loginButton.className = 'px-3 sm:px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-lg transition-colors text-xs sm:text-sm flex items-center justify-center sm:justify-start';
                loginButton.innerHTML = `
                    <svg class="w-3 h-3 sm:w-4 sm:h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1"></path>
                    </svg>
                    Login to Your Account
                `;

                const registerButton = document.createElement('a');
                registerButton.href = '/register?redirect=/ai-chat';
                registerButton.className = 'px-3 sm:px-4 py-2 bg-secondary-600 hover:bg-secondary-700 text-white rounded-lg transition-colors text-xs sm:text-sm flex items-center justify-center sm:justify-start';
                registerButton.innerHTML = `
                    <svg class="w-3 h-3 sm:w-4 sm:h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z"></path>
                    </svg>
                    Create New Account
                `;

                buttonContainer.appendChild(loginButton);
                buttonContainer.appendChild(registerButton);
                errorContainer.appendChild(buttonContainer);
            }

            // Add retry button for quota exceeded
            if (data.type === 'quota_exceeded' && data.retryAfter) {
                // Add a more detailed message
                const detailMessage = document.createElement('div');
                detailMessage.className = 'mt-2 text-gray-400 text-xs sm:text-sm';
                detailMessage.innerHTML = `
                    <p>As a logged-in user, you are limited to ${data.max} requests per minute.</p>
                    <p class="mt-1">You have used <span class="text-primary-300 font-medium">${data.used}</span> of <span class="text-primary-300 font-medium">${data.max}</span> requests.</p>
                    <p class="mt-1">Your limit will reset in <span class="text-primary-300 font-medium">${Math.floor(data.resetsIn / 60)}:${(data.resetsIn % 60).toString().padStart(2, '0')}</span>.</p>
                `;
                errorContainer.appendChild(detailMessage);

                const retryContainer = document.createElement('div');
                retryContainer.className = 'mt-3';

                const retryButton = document.createElement('button');
                retryButton.className = 'px-3 sm:px-4 py-2 bg-red-600/50 hover:bg-red-700/50 text-white rounded-lg transition-colors text-xs sm:text-sm flex items-center justify-center';
                retryButton.innerHTML = `
                    <svg class="w-3 h-3 sm:w-4 sm:h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                    </svg>
                    Retry in <span id="retryCounter">${data.retryAfter}</span>s
                `;

                retryContainer.appendChild(retryButton);
                errorContainer.appendChild(retryContainer);

                // Countdown timer
                let countdown = data.retryAfter;
                const countdownEl = retryButton.querySelector('#retryCounter');
                const countdownInterval = setInterval(() => {
                    countdown--;
                    countdownEl.textContent = countdown;

                    if (countdown <= 0) {
                        clearInterval(countdownInterval);
                        retryButton.innerHTML = `
                            <svg class="w-3 h-3 sm:w-4 sm:h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                            </svg>
                            Retry Now
                        `;
                        retryButton.classList.remove('bg-red-600/50', 'hover:bg-red-700/50');
                        retryButton.classList.add('bg-green-600/50', 'hover:bg-green-700/50');
                    }
                }, 1000);

                // Add click event to retry
                retryButton.addEventListener('click', () => {
                    if (countdown <= 0) {
                        errorContainer.remove();
                        clearInterval(countdownInterval);
                        handleSend();
                    }
                });
            }

            chatMessages.appendChild(errorContainer);
            chatMessages.scrollTop = chatMessages.scrollHeight;

            // On mobile, ensure the error is visible
            if (window.innerWidth < 640) {
                setTimeout(() => {
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                }, 100);
            }
        }

        // Handle stopping the request
        function handleStop() {
            if (currentRequest) {
                currentRequest = null;
                removeTypingIndicator();
                setLoadingState(false);

                // Show stopped message
                const stoppedMessage = 'AI response was stopped.';
                displayMessage(stoppedMessage, false);
                showNotification('Response stopped', 'info');
            }
        }

        // Add event listeners
        sendButton.addEventListener('click', () => {
            if (currentRequest) {
                handleStop();
            } else {
                handleSend();
            }
        });

        userInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey && !currentRequest) {
                e.preventDefault();
                handleSend();
            }
        });
    </script>

    <style>
        /* Animations and effects */
        .typing-dots {
            animation: typing 1.5s infinite;
        }

        @keyframes typing {
            0% { opacity: 0.3; }
            50% { opacity: 1; }
            100% { opacity: 0.3; }
        }

        /* Scrollbar styling */
        ::-webkit-scrollbar {
            width: 6px;
            height: 6px;
        }

        ::-webkit-scrollbar-track {
            background: transparent;
        }

        ::-webkit-scrollbar-thumb {
            background: rgba(107, 114, 128, 0.5);
            border-radius: 3px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: rgba(107, 114, 128, 0.7);
        }

        /* Light mode styles */
        html.light body {
            background-color: #f3f4f6;
            color: #1f2937;
        }

        html.light #chatContainer {
            background-color: rgba(255, 255, 255, 0.7);
            border-color: rgba(209, 213, 219, 0.5);
        }

        html.light .bg-gray-800\/70 {
            background-color: rgba(255, 255, 255, 0.7);
        }

        html.light .bg-gray-800\/50 {
            background-color: rgba(255, 255, 255, 0.5);
        }

        html.light .border-gray-700 {
            border-color: rgba(209, 213, 219, 0.7);
        }

        html.light .text-gray-300 {
            color: #4b5563;
        }

        html.light .text-gray-400 {
            color: #6b7280;
        }

        html.light #historyPanel {
            background-color: rgba(255, 255, 255, 0.85);
            border-color: rgba(209, 213, 219, 0.7);
        }

        /* Glassmorphism effects */
        .glass {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        /* Neon text effect */
        .neon-text {
            color: #0ff;
            text-shadow: 0 0 5px #0ff, 0 0 10px #0ff, 0 0 20px #0ff;
        }

        /* Responsive adjustments */
        @media (max-width: 640px) {
            #chatMessages {
                height: calc(100vh - 16rem);
            }

            #historyPanel {
                width: 100%;
                z-index: 50;
            }

            .max-w-\[80\%\] {
                max-width: 90%;
            }

            #themeToggle, #historyButton {
                transform: scale(0.9);
            }

            .fixed.top-4.right-4 {
                top: 0.75rem;
                right: 0.75rem;
            }

            .fixed.top-4.right-16 {
                top: 0.75rem;
                right: 3.5rem;
            }

            .fixed.top-4.left-20 {
                top: 0.75rem;
                left: 4.5rem;
            }

            /* Adjust message bubbles for mobile */
            .p-4.rounded-2xl {
                padding: 0.75rem;
                border-radius: 1rem;
            }

            /* Make typing indicator more compact */
            #typingIndicator {
                max-width: 80% !important;
                padding: 0.5rem 0.75rem;
            }

            /* Adjust notification position */
            .notification {
                max-width: 90%;
                font-size: 0.875rem;
            }
        }

        /* Medium screens */
        @media (min-width: 641px) and (max-width: 1024px) {
            #chatMessages {
                height: calc(100vh - 18rem);
            }

            #historyPanel {
                width: 320px;
            }
        }
    </style>
</body>
</html>