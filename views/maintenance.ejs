<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Under Maintenance</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-900 text-white min-h-screen">
    <div class="container mx-auto px-4 py-8 flex min-h-screen items-center justify-center">
        <div class="w-full max-w-2xl mx-auto bg-gray-800/50 backdrop-blur-md p-8 rounded-xl shadow-2xl">
            <!-- Maintenance Icon -->
            <div class="mb-8 flex justify-center">
                <div class="relative">
                    <svg class="w-24 h-24 text-yellow-400 animate-spin-slow" fill="none" viewBox="0 0 24 24">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                              d="M12 6V4m0 2a6 6 0 100 12 6 6 0 000-12zm0 0v2m7 5h-2m-4 7v2m-7-5H4"/>
                    </svg>
                </div>
            </div>

            <!-- Content -->
            <div class="text-center space-y-6">
                <h1 class="text-4xl md:text-5xl font-bold mb-4 text-transparent bg-clip-text bg-gradient-to-r from-yellow-400 to-orange-600">
                    Under Maintenance
                </h1>

                <!-- Maintenance Reason and Details -->
                <div class="bg-gray-800/50 backdrop-blur-md p-6 rounded-lg mb-8">
                    <div class="space-y-4">
                        <div>
                            <h3 class="text-lg font-semibold text-gray-300">Reason:</h3>
                            <p class="text-xl text-yellow-400"><%= maintenance.reason %></p>
                        </div>
                        <div>
                            <h3 class="text-lg font-semibold text-gray-300">Details:</h3>
                            <p class="text-xl text-blue-400"><%= maintenance.message %></p>
                        </div>
                        <div class="text-sm text-gray-400">
                            <p>Started: <%= new Date(maintenance.startTime).toLocaleString() %></p>
                            <p>Expected Duration: <%= maintenance.formatDuration() %></p>
                            <% if (maintenance.endTime) { %>
                                <p>Ended: <%= new Date(maintenance.endTime).toLocaleString() %></p>
                            <% } %>
                        </div>
                    </div>
                </div>

                <!-- Admin Login Button -->
                <div class="flex justify-center mb-6">
                    <a href="/login" class="bg-blue-600 hover:bg-blue-700 text-white px-8 py-3 rounded-lg">
                        Admin Login
                    </a>
                </div>

                <!-- Countdown Timer -->
                <div class="grid grid-cols-2 md:grid-cols-4 gap-4 max-w-lg mx-auto mb-8">
                    <div class="bg-gray-700 p-3 rounded-lg">
                        <span id="hours" class="text-2xl font-bold text-blue-400">00</span>
                        <p class="text-xs mt-1">Hours</p>
                    </div>
                    <div class="bg-gray-700 p-3 rounded-lg">
                        <span id="minutes" class="text-2xl font-bold text-blue-400">00</span>
                        <p class="text-xs mt-1">Minutes</p>
                    </div>
                    <div class="bg-gray-700 p-3 rounded-lg">
                        <span id="seconds" class="text-2xl font-bold text-blue-400">00</span>
                        <p class="text-xs mt-1">Seconds</p>
                    </div>
                    <div class="bg-gray-700 p-3 rounded-lg">
                        <span id="milliseconds" class="text-2xl font-bold text-blue-400">00</span>
                        <p class="text-xs mt-1">Milliseconds</p>
                    </div>
                </div>

                <!-- Login Message -->
                <div class="bg-gray-800/50 backdrop-blur-md p-6 rounded-lg mt-8">
                    <div class="flex justify-center">
                        <a href="/login" class="bg-blue-600 hover:bg-blue-700 text-white px-8 py-3 rounded-lg">
                            Administrator Login
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let endTime;

        function initializeCountdown() {
            const startTime = new Date("<%= maintenance.startTime %>");
            const duration = parseInt("<%= maintenance.duration %>");
            const durationUnit = "<%= maintenance.durationUnit %>";
            
            const multipliers = {
                minutes: 60 * 1000,
                hours: 60 * 60 * 1000,
                days: 24 * 60 * 60 * 1000
            };

            const durationMs = duration * (multipliers[durationUnit] || multipliers.hours);
            endTime = new Date(startTime.getTime() + durationMs);

            // Store end time in localStorage
            localStorage.setItem('maintenanceEndTime', endTime.getTime());
            localStorage.setItem('maintenanceId', '<%= maintenance._id %>');
        }

        function updateCountdown() {
            try {
                // Get stored end time or initialize if not exists
                if (!endTime) {
                    const storedEndTime = localStorage.getItem('maintenanceEndTime');
                    const storedMaintenanceId = localStorage.getItem('maintenanceId');
                    
                    // If maintenance ID changed, reinitialize
                    if (storedMaintenanceId !== '<%= maintenance._id %>') {
                        initializeCountdown();
                    } else if (storedEndTime) {
                        endTime = new Date(parseInt(storedEndTime));
                    } else {
                        initializeCountdown();
                    }
                }

                const now = new Date();
                const remaining = endTime - now;

                if (remaining <= 0) {
                    document.getElementById('countdown').innerHTML = 
                        '<span class="text-green-400">Maintenance should be complete. Please try refreshing.</span>';
                    return false;
                }

                const hours = Math.floor(remaining / (1000 * 60 * 60));
                const minutes = Math.floor((remaining % (1000 * 60 * 60)) / (1000 * 60));
                const seconds = Math.floor((remaining % (1000 * 60)) / 1000);
                const milliseconds = Math.floor((remaining % 1000) / 10);

                document.getElementById('hours').textContent = hours.toString().padStart(2, '0');
                document.getElementById('minutes').textContent = minutes.toString().padStart(2, '0');
                document.getElementById('seconds').textContent = seconds.toString().padStart(2, '0');
                document.getElementById('milliseconds').textContent = milliseconds.toString().padStart(2, '0');

                return true;
            } catch (error) {
                console.error('Error updating countdown:', error);
                return false;
            }
        }

        // Add automatic refresh check
        async function checkMaintenanceStatus() {
            try {
                const response = await fetch('/auth/maintenance/status');
                const data = await response.json();
                
                if (!data.inMaintenance) {
                    window.location.href = '/';
                }
                return data.inMaintenance;
            } catch (error) {
                console.error('Error checking maintenance:', error);
                return true;
            }
        }

        // Check maintenance status periodically
        setInterval(checkMaintenanceStatus, 30000); // Check every 30 seconds

        // Initialize countdown on page load
        initializeCountdown();

        // Update countdown every 10ms
        const timer = setInterval(() => {
            const stillCounting = updateCountdown();
            if (!stillCounting) {
                clearInterval(timer);
                checkMaintenanceStatus(); // Check status when countdown ends
            }
        }, 10);

        async function disableMaintenance() {
            if (!confirm('Are you sure you want to disable maintenance mode?')) return;
            
            try {
                const response = await fetch('/admin/maintenance/stop', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                if (response.ok) {
                    window.location.href = '/admin/maintenance';
                } else {
                    alert('Failed to disable maintenance mode');
                }
            } catch (error) {
                alert('Error: ' + error.message);
            }
        }
    </script>
</body>
</html>
